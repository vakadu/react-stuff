{
  "Div": {
    "prefix": "d",
    "body": [
      "<div className=\"flex items-center justify-center h-screen\">",
      "  $1",
      "</div>",
    ],
    "description": "A Simple div",
  },
  "Paragraph": {
    "prefix": "p",
    "body": ["<p className=\"text-center text-base\">", "  $1", "</p>"],
    "description": "A Simple Paragraph",
  },
  "export *": {
    "prefix": "ex *",
    "body": ["export * from '$1';"],
    "description": "export *",
  },
  "Component": {
    "prefix": "comp",
    "body": [
      "import React from 'react';",
      "",
      "type Props = {",
      "  $2",
      "};",
      "",
      "export const ${1:CompName} = ({}: Props) => {",
      "  return (",
      "    <div className=\"flex\">",
      "      <p className=\"text-base\">${1:CompName} Component</p>",
      "    </div>",
      "  );",
      "};",
      "",
    ],
    "description": "Component",
  },
  "useQuery with variables": {
    "prefix": "useqv",
    "body": [
      "import { useQuery } from '@tanstack/react-query';",
      "",
      "import { HttpService } from '../services';",
      "",
      "type Variables = {$3};",
      "type Response = {$4};",
      "",
      "export const use$1 = (variables: Variables) => {",
      "  return useQuery<Response>(['$2', variables], async () => {",
      "    const { data } = await HttpService.get(`$2/${variables.${5}}`);",
      "    return data;",
      "  });",
      "};",
      "",
    ],
    "description": "useQuery with variables",
  },
  "useQuery": {
    "prefix": "useq",
    "body": [
      "import { useQuery } from '@tanstack/react-query';",
      "",
      "import { HttpService } from '../services';",
      "",
      "type Response = {$3};",
      "",
      "export const use$1 = () => {",
      "  return useQuery<Response>(['$2'], async () => {",
      "    const { data } = await HttpService.get('$2');",
      "    return data.posts;",
      "  });",
      "};",
      "",
    ],
    "description": "useQuery",
  },
  "useInfiniteQuery": {
    "prefix": "useiq",
    "body": [
      "import type { AxiosError } from 'axios';",
      "import { createInfiniteQuery } from 'react-query-kit';",
      "",
      "import { client } from '../common/client';",
      "import { DEFAULT_LIMIT, getNextPageParam } from '../common/utils';",
      "import type { PaginateQuery } from '../types';",
      "",
      "type Response = void;",
      "type Variables = PaginateQuery<$3>;",
      "",
      "export const use$1 = createInfiniteQuery<Response, Variables, AxiosError>({",
      "  queryKey: ['$2'],",
      "  fetcher: (_variables, { pageParam }) => {",
      "    return client({",
      "      url: `/$2/`,",
      "      method: 'GET',",
      "      params: {",
      "        limit: DEFAULT_LIMIT,",
      "        offset: pageParam",
      "      }",
      "    }).then((response) => response.data);",
      "  },",
      "  getNextPageParam,",
      "  initialPageParam: 0",
      "});",
    ],
    "description": "useInfiniteQuery",
  },
  "useMutation": {
    "prefix": "usem",
    "body": [
      "import { useMutation } from '@tanstack/react-query';",
      "",
      "import { HttpService } from '../services';",
      "",
      "type Variables = {$3};",
      "type Response = {$4};",
      "",
      "export const use$1 = () => {",
      "  return useMutation({",
      "    mutationFn: updateUserDetails,",
      "onSuccess: (data) => {}",
      "onError: (err) => {}",
      "  });",
      "};",
      "",
    ],
    "description": "useMutation",
  },
  "navigate": {
    "prefix": "navigate",
    "body": ["const router = useRouter();", "router.push('$1');"],
    "description": "Navigate in Next.js",
  },
}
